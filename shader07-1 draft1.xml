<?xml version="1.0" encoding="ISO-8859-1"?>
<pipeline>
<vertex>
<![CDATA[#version 400

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;
in vec2 textureCoordinate_input;

out data
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
}vertexIn;

//Vertex shader compute the vectors per vertex
void main(void)
{
    //Put the vertex in the correct coordinate system by applying the model view matrix
    vec4 vertex_camSpace = mvMatrix*vertex_worldSpace;
	vertexIn.position_camSpace = vertex_camSpace;
	
    //Apply the model-view transformation to the normal (only rotation, no translation)
    //Normals put in the camera space
    vertexIn.normal_camSpace = normalize(normalMatrix*normal_worldSpace);

	//Color chosen as red
	vertexIn.color = vec4(1.0,0.0,0.0,1.0);
    
    //Texture coordinate
    vertexIn.textureCoordinate = textureCoordinate_input;
	
    gl_Position = pMatrix * vertex_camSpace;
}














]]></vertex>
<geom>
<![CDATA[#version 400

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space


in data
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
}vertexIn[3];

out fragmentData
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
} frag;


void main() {
  for(int i = 0; i < 3; i++) { // You used triangles, so it's always 3
    gl_Position = gl_in[i].gl_Position;
	frag.position_camSpace = vertexIn[i].position_camSpace;
	frag.normal_camSpace = vertexIn[i].normal_camSpace;
	frag.textureCoordinate = vertexIn[i].textureCoordinate;
	frag.color = vertexIn[i].color;
    EmitVertex();
  }
  EndPrimitive();
}













]]></geom>
<frag>
<![CDATA[#version 400

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;

uniform vec4 lightPosition_camSpace; //light Position in camera space

in fragmentData
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
} frag;


out vec4 fragColor;

//Fragment shader computes the final color
void main(void)
{
	//Not used in that task
    fragColor =  frag.color;
}













]]></frag>
<R2TVert>
<![CDATA[#version 400
#extension GL_ARB_separate_shader_objects : enable

uniform mat4 mMatrix;
uniform mat4 mvMatrix;

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;

out vec3 dir; 

void  main () 
{ 
	vec4 vertex_modelSpace = mMatrix*vertex_worldSpace;
	
    dir = normalize ( vec3 ( vertex_modelSpace.x * 1.6,  vertex_modelSpace.y , -1.0 )); 
	
    gl_Position  = vertex_modelSpace; 
}














]]></R2TVert>
<R2TFrag>
<![CDATA[#version 400

in vec3 dir; 
out vec4 outcolour;

vec3 lightSource = vec3(6,4,3);
//EXTENSION for soft shadow, these form a square source (9 rays shooting)
uniform bool softshadow; //make this true to enable soft shadow extension
/*no of random ray sent to lightSource area from a point
  the more the nicer the shadow is, the lower fps, I use around 8-9*/
uniform int no_of_rays; 
vec3 lightSources[9] = vec3[](vec3(6,4,3),vec3(8,4,3),vec3(8,4,5),vec3(6,4,5),vec3(7,4,3),vec3(7,4,4),vec3(7,4,5),vec3(6,4,4),vec3(8,4,4));


const float epsilon = 0.0001; //to use with points below pbject surface

uniform mat4 mMatrix;
uniform mat4 mvMatrix;
uniform mat4 mvMatrixScene;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

const int raytraceDepth = 42;
const int numSpheres = 6;

//example data structures
struct Ray
{
	vec3 origin;
	vec3 dir;
};
struct Sphere
{
	vec3 centre;
	float radius;
	vec3 colour;
};
struct Plane
{
	vec3 point;
	vec3 normal;
	vec3 colour;
};

struct Intersection
{
    float t; //closest hit
    vec3 point;	// hit point
    vec3 normal;	// normal
    int hit;	//did it hit?
    vec3 colour; // colour accumulation, can be also implemented in struct Ray
};

void sphere_intersect(Sphere sph, Ray ray, inout Intersection intersect)
{
 	//mu^2 + 2(d*dp)mu + (dp^2-r^2) = 0
    vec3 dp = ray.origin - sph.centre; //dp = p0-ps
    float b = 2.0 * dot(ray.dir, dp);
    float c = dot(dp, dp) - pow(sph.radius, 2.0);
    float delta = pow(b, 2.0) - 4.0 * c; // a is 1.0
    if (delta >= 0.0)
    {
		float mu1 = (- b + sqrt(delta))/2.0;
		float mu2 = (- b - sqrt(delta))/2.0;
		float mu = min(mu1, mu2);
		//new mu has to be closer than the closest one observed
		if (mu > 0 && mu < intersect.t) {
        		intersect.hit = 1;
        		intersect.t = mu;
        		intersect.point = ray.origin + mu * ray.dir;
			intersect.normal = normalize(intersect.point - sph.centre);
 	       	intersect.colour = sph.colour;

			//test if within epsilon
			if (abs(mu) < epsilon) {
				intersect.point += intersect.normal * epsilon;
			}
		}
    }

}

void plane_intersect(Plane pl, Ray ray, inout Intersection intersect)
{
	float mu = -1.0 * dot(pl.normal,(ray.origin - pl.point)) /
				dot(normalize(ray.dir),pl.normal);
	if (mu > 0 && mu < intersect.t){
		intersect.hit = 1;
		intersect.t = mu;
      	intersect.point = ray.origin + mu * ray.dir;
		intersect.normal = normalize(pl.normal);


		//checkerboard effect
		if((mod(floor(1.7*intersect.point.x),2) == 0.0 && mod(floor(1.7*intersect.point.z),2) == 0.0) || 
		  (mod(floor(1.7*intersect.point.x),2) != 0.0 && mod(floor(1.7*intersect.point.z),2) != 0.0)){
			intersect.colour = vec3(0.6,0.6,0.6);
		} else {
			intersect.colour = pl.colour;
		}
	}
}

Sphere sphere[numSpheres];
Plane plane;
void Intersect(Ray r, inout Intersection i)
{
	plane_intersect(plane, r, i);
    for (int j = 0; j < numSpheres; j++) {
        sphere_intersect(sphere[j], r, i);
    }
}

int seed = 0;
float rnd()
{
	seed = int(mod(float(seed)*1364.0+626.0, 509.0));
	return float(seed)/509.0;
}

//----------SOFT SHADOW EXTENSION-----------------------------------------
vec3 computeSoftShadow(in Intersection intersect)
{
	Ray shadow;
	shadow.origin = intersect.point + intersect.normal*epsilon; //move origin outside
	int count = 0; //no of obscured ray from the point
	for(int i = 0; i < no_of_rays; i++){
		//cast shadow ray from the intersection point
		//adding random vec3 between (0,0,0)-(1,1,1) results in random area-like light source
		shadow.dir = normalize((lightSource + vec3(0.5*rnd(),0.5*rnd(),0.5*rnd())) - shadow.origin);
		Intersection s;
		s.t = 1.0/0.0;
    		s.hit = 0;
		Intersect(shadow, s);
	
		if (s.hit == 1) count++;
	}

		vec3 lightDirection = normalize(lightSource -intersect.point);
    		vec3 viewingDirection = normalize(vec3(0,0,0)-intersect.point);
 
		float lightDistance = length(lightSource - intersect.point);
		float attenuation = 1.0 / (lightDistance*lightDistance);
    		float lightIntensity = 500.0;
		vec3 diffuse = vec3(0.17,0.17,0.17); 	//self-defined diffuse
		vec3 diffuseColor = clamp(lightIntensity*attenuation*max(0.0, dot(intersect.normal, lightDirection))*diffuse, 0.0, 1.0);

		float shade = pow(0.25,count*2); //the more obscured, the darker
		return vec3(shade,shade,shade)*intersect.colour*diffuseColor;
}
//-----------------------------------------------------------------------------

vec3 computeShadow(in Intersection intersect)
{
	if(softshadow) return computeSoftShadow(intersect);
	//cast shadow ray from the intersection point
	Ray shadow;
	shadow.origin = intersect.point + intersect.normal*epsilon; //move origin outside
	shadow.dir = normalize(lightSource - shadow.origin);
	Intersection s;
	s.t = 1.0/0.0;
    	s.hit = 0;
	Intersect(shadow, s);
	
	if (s.hit == 1) {
		return vec3(0,0,0);

	} else {
		vec3 lightDirection = normalize(lightSource -intersect.point);
    		vec3 viewingDirection = normalize(vec3(0,0,0)-intersect.point);
 
		float lightDistance = length(lightSource - intersect.point);
		float attenuation = 1.0 / (lightDistance*lightDistance);
    		float lightIntensity = 500.0;
		vec3 diffuse = vec3(0.17,0.17,0.17); 	//self-defined diffuse, specular omitted
		vec3 diffuseColor = clamp(lightIntensity*attenuation*max(0.0, dot(intersect.normal, lightDirection))*diffuse, 0.0, 1.0);
		
		return intersect.colour*diffuseColor;
	}
}



void main()
{
	//please leave the scene config unaltered for marking 
	sphere[0].centre   = vec3(-2.0, 1.5, -3.5);
	sphere[0].radius   = 1.5;
	sphere[0].colour = vec3(0.8,0.8,0.8);
	sphere[1].centre   = vec3(-0.5, 0.0, -2.0);
	sphere[1].radius   = 0.6;
	sphere[1].colour = vec3(0.3,0.8,0.3);
	sphere[2].centre   = vec3(1.0, 0.7, -2.2);
	sphere[2].radius   = 0.8;
	sphere[2].colour = vec3(0.3,0.8,0.8);
	sphere[3].centre   = vec3(0.7, -0.3, -1.2);
	sphere[3].radius   = 0.2;
	sphere[3].colour = vec3(0.8,0.8,0.3);
	sphere[4].centre   = vec3(-0.7, -0.3, -1.2);
	sphere[4].radius   = 0.2;
	sphere[4].colour = vec3(0.8,0.3,0.3);
	sphere[5].centre   = vec3(0.2, -0.2, -1.2);
	sphere[5].radius   = 0.3;
	sphere[5].colour = vec3(0.8,0.3,0.8);
	plane.point = vec3(0,-0.5, 0);
	plane.normal = vec3(0, 1.0, 0);
	plane.colour = vec3(1, 1, 1);
	seed = int(mod(dir.x * dir.y * 39786038.0, 65536.0));
	//scene definition end


	//ray tracing main loop with mouse based interaction
	Ray ray;
	ray.origin = vec3(inverse(mvMatrixScene)*vec4(1,1,1,1)) - vec3(1,1,0);
				//vec3(0,0,0); //use this vec for no mouse interaction
	ray.dir = normalize(inverse(mat3(mvMatrixScene))*dir);
              //normalize(dir); //use this dir for no mouse interaction

	vec3 temp_colour;
	bool nohit = false;

	for (int i = 0; i < raytraceDepth; i++) {
	    	Intersection intersect;
		intersect.t = 1.0/0.0;
    		intersect.hit = 0;
		Intersect(ray, intersect);
		if (intersect.hit == 1) 	{
			float fresnel = 0.8+0.2*pow(1-max(0,dot(intersect.normal,ray.dir)),5);
   			if (i == 0 ) {
   				temp_colour =  computeShadow(intersect);
			} else {
   				temp_colour *=  fresnel*(intersect.colour + computeShadow(intersect));
			}
		} else {
			if(i == 0) nohit = true; 
			break; 
		}
		//new ray origin moved by epsilon
		ray.origin = intersect.point + epsilon*intersect.normal;
		ray.dir = reflect(ray.dir, intersect.normal);
	} 

	if(nohit) {
		outcolour = vec4(0,0,0,0);
	} else {
		outcolour = vec4(temp_colour,1);
	}
	

	
}














]]></R2TFrag>
</pipeline>
